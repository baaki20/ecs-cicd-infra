AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template provisions the application-specific resources for the ECS CI/CD Lab,
  including the ECS service and task definition, CodeDeploy application, and the
  CodePipeline for blue/green deployment.

Parameters:
  StackName:
    Type: String
    Description: The name of the base infrastructure stack.

Resources:
  # --- CodeDeploy and Pipeline Resources ---
  CodeDeployApplication:
    Type: 'AWS::CodeDeploy::Application'
    Properties:
      ApplicationName: !Sub '${StackName}-ECS-CodeDeploy-App'
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: 'AWS::CodeDeploy::DeploymentGroup'
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${StackName}-ECS-CodeDeploy-DG'
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !ImportValue !Sub '${StackName}-CodeDeployRoleArn'
      DeploymentStyle:
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      EcsServices:
        - ClusterName: !ImportValue !Sub '${StackName}-ECSCluster'
          ServiceName: !Ref ECSService
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - TargetGroupArn: !ImportValue !Sub '${StackName}-TargetGroup'
              - TargetGroupArn: !ImportValue !Sub '${StackName}-BlueTargetGroup'
            ProdTrafficRoute:
              ListenerArns:
                - !ImportValue !Sub '${StackName}-Listener'
            TestTrafficRoute:
              ListenerArns:
                - !ImportValue !Sub '${StackName}-TestListener'
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${StackName}-Pipeline'
      RoleArn: !ImportValue !Sub '${StackName}-CodePipelineRoleArn'
      Stages:
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateFileName: 'taskdef.json'
                AppSpecTemplateFileName: 'appspec.yaml'
                ImageId: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StackName}-ECRRepositoryName:latest'
              OutputArtifacts:
                - Name: DeployArtifact
              RunOrder: 1

  # --- ECS Service and Task Definition ---
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !ImportValue !Sub '${StackName}-ECSCluster'
      ServiceName: !Sub '${StackName}-Service'
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue !Sub '${StackName}-PrivateSubnet1'
            - !ImportValue !Sub '${StackName}-PrivateSubnet2'
          SecurityGroups:
            - !ImportValue !Sub '${StackName}-FargateSecurityGroup'
          AssignPublicIp: 'DISABLED'
      DeploymentConfiguration:
        Alarms:
          AlarmNames:
            - !Ref Alarm
          Enable: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - TargetGroupArn: !ImportValue !Sub '${StackName}-TargetGroup'
          ContainerName: ecs-cicd-app
          ContainerPort: 8080

  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${StackName}-TaskDefinition'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !ImportValue !Sub '${StackName}-ECSTaskExecutionRoleArn'
      ContainerDefinitions:
        - Name: ecs-cicd-app
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StackName}-ECRRepositoryName:latest'
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue !Sub '${StackName}-LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs

  # --- CloudWatch Alarm ---
  Alarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${StackName}-FailedDeployAlarm'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Threshold: 1
      Namespace: 'AWS/CodeDeploy'
      MetricName: 'DeploymentFailed'
      Dimensions:
        - Name: ApplicationName
          Value: !Ref CodeDeployApplication
        - Name: DeploymentGroupName
          Value: !Ref CodeDeployDeploymentGroup
      Statistic: Sum

  # --- EventBridge Rule to trigger CodePipeline ---
  ECRPushEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: "Rule to trigger CodePipeline on new ECR image push"
      EventPattern:
        source:
          - "aws.ecr"
        detail-type:
          - "ECR Image Action"
        detail:
          repository-name:
            - !ImportValue !Sub '${StackName}-ECRRepositoryName'
          image-tag:
            - "latest"
          action-type:
            - "PUSH"
      Targets:
        - Arn: !Ref CodePipeline
          Id: "CodePipelineTarget"
          RoleArn: !ImportValue !Sub '${StackName}-EventBridgeRoleArn'