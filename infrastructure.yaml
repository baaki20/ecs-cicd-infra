AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Single CloudFormation template provisioning all infra for the ECS CICD Lab.
  - VPC (2 AZs), public & private subnets
  - Internet Gateway, NAT Gateway (cost-aware)
  - Public ALB with HTTP listener (recommend adding HTTPS/ACM in prod)
  - ECR repository
  - ECS Cluster, TaskDefinition (placeholder) and Service (CODE_DEPLOY)
  - CloudWatch LogGroup
  - S3 artifact bucket
  - IAM Roles for Pipeline, CodeBuild, CodeDeploy, ECS
  - CodeDeploy Application + DeploymentGroup (Blue/Green)
  - CodePipeline with ECR Source (Image) and CodeDeploy deploy action
  - EventBridge rule to trigger pipeline on ECR push
  - Application Auto Scaling for ECS Service (min=1 desired=1 max=4)

# ------------------------------- PARAMETERS ---------------------------------
Parameters:
  ProjectName:
    Type: String
    Default: ecs-cicd-lab
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.11.0/24
  ContainerPort:
    Type: Number
    Default: "8080"
  HealthCheckPath:
    Type: String
    Default: /
  DesiredCount:
    Type: Number
    Default: "1"
  MinCount:
    Type: Number
    Default: "1"
  MaxCount:
    Type: Number
    Default: "4"
  TaskCpu:
    Type: Number
    Description: Fargate task CPU (must be one of the allowed Fargate values)
    Default: "256"
    AllowedValues: ["256","512","1024","2048","4096","8192"]
  TaskMemory:
    Type: Number
    Description: Fargate task memory in MiB (must be compatible with CPU selection)
    Default: "512"
  EcrRepoName:
    Type: String
    Default: ecs-cicd-lab/app
  ArtifactBucketName:
    Type: String
    Default: ecs-cicd-lab-dev-artifacts
  DeploymentTrafficShiftInterval:
    Type: Number
    Default: "60"
  DeploymentTrafficShiftPercentage:
    Type: Number
    Default: "10"
  CodeStarConnectionArn:
    Type: String
    Description: The ARN of the CodeStar connection to your GitHub repository.
  GitHubRepoOwner:
    Type: String
    Default: baaki20
  GitHubRepoName:
    Type: String
    Default: ecs-cicd-app
  GitHubBranch:
    Type: String
    Default: main
# ------------------------------- MAPPINGS -----------------------------------
Mappings: {}

# ------------------------------- RESOURCES ----------------------------------
Resources:
  ###################################
  # Networking
  ###################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-az1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-az2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-az1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-az2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcIgwAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRoute1Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2Default:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  ###################################
  # Security
  ###################################
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-alb-sg

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS tasks security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-ecs-sg

  ###################################
  # Load Balancer & Target Groups
  ###################################
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VpcIgwAttachment
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Type: application

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-tg-blue
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher: { HttpCode: '200' }

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-tg-green
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      Matcher: { HttpCode: '200' }

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

  TestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 9001
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupGreen

  ###################################
  # Logging
  ###################################
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}/${Environment}
      RetentionInDays: 14

 ###################################
  # IAM Roles (Changes here)
  ###################################
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      # Add policies for any other AWS services your container needs to access.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Sub '${ArtifactBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:ListApplications
                  - codedeploy:ListDeploymentGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt CodeBuildServiceRole.Arn
                  - !GetAtt EcsTaskExecutionRole.Arn
                  - !GetAtt EcsTaskRole.Arn
                Condition:
                  StringEquals:
                    iam:PassedToService:
                      - codebuild.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepoName}'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref CodeStarConnectionArn

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeBuildInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketLocation
                Resource:
                  - !Sub '${ArtifactBucket.Arn}/*'
                  - !GetAtt ArtifactBucket.Arn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepoName}'
                   
  ###################################
  # ECS Cluster, TaskDefinition, Service (CODE_DEPLOY)
  ###################################
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Environment}

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Environment}-task
      RequiresCompatibilities: [FARGATE]
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}:latest
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AppLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: HttpListener
    Properties:
      ServiceName: !Sub ${ProjectName}-${Environment}-svc
      Cluster: !Ref EcsCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      TaskDefinition: !Ref EcsTaskDefinition
      DeploymentController: { Type: CODE_DEPLOY }
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref EcsSecurityGroup
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupBlue

  ###################################
  # Application Auto Scaling (ECS DesiredCount)
  ###################################
  EcsServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref MinCount
      ResourceId: !Sub service/${EcsCluster}/${EcsService.Name}
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  CpuTargetTrackingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${ProjectName}-${Environment}-cpu-target-tracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EcsServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  ###################################
  # CodeDeploy (Application & DeploymentGroup - Blue/Green)
  ###################################
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${ProjectName}-${Environment}-cd-app
      ComputePlatform: ECS

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${ProjectName}-${Environment}-cd-dg
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !GetAtt TargetGroupBlue.TargetGroupName
              - Name: !GetAtt TargetGroupGreen.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref HttpListener
            TestTrafficRoute:
              ListenerArns:
                - !Ref TestListener
      ECSServices:
      - ClusterName: !Ref EcsCluster
        ServiceName: !GetAtt EcsService.Name
  
  ###################################
  # S3 artifact bucket
  ##################################
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactBucketName
      VersioningConfiguration:
        Status: Enabled

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref EcrRepoName

  ###################################
  # CodePipeline (Simplified and Corrected)
  ###################################
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${ProjectName}-${Environment}-pipeline
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Sub '${GitHubRepoOwner}/${GitHubRepoName}'
                BranchName: !Ref GitHubBranch
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                TaskDefinitionTemplateArtifact: BuildOutput
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: BuildOutput
                AppSpecTemplatePath: appspec.yml

  CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
        Name: !Sub ${ProjectName}-${Environment}-build-project
        ServiceRole: !GetAtt CodeBuildServiceRole.Arn
        Artifacts:
          Type: CODEPIPELINE
          Name: BuildOutput
        Environment:
          ComputeType: BUILD_GENERAL1_SMALL
          Image: 'aws/codebuild/standard:7.0'
          Type: LINUX_CONTAINER
          EnvironmentVariables:
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ECR_REPO_NAME
              Value: !Ref EcrRepoName
            - Name: CONTAINER_PORT
              Value: !Ref ContainerPort
            - Name: ECS_TASK_EXECUTION_ROLE_ARN
              Value: !GetAtt EcsTaskExecutionRole.Arn
            - Name: ECS_TASK_ROLE_ARN
              Value: !GetAtt EcsTaskRole.Arn
        Source:
          Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                docker: 18
            build:
              commands:
                - echo "Generating task definition and app spec files..."
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - IMAGE_TAG=${COMMIT_HASH:-latest}
                - printf '[{"name":"app","image":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > taskdef.json
                - |
                  printf '{
                    "version": "0.0",
                    "Resources": [
                      {
                        "TargetService": {
                          "Type": "AWS::ECS::Service",
                          "Properties": {
                            "TaskDefinition": "<TASK_DEFINITION_ARN>",
                            "LoadBalancerInfo": {
                              "ContainerName": "app",
                              "ContainerPort": %s
                            }
                          }
                        }
                      }
                    ]
                  }' $CONTAINER_PORT > appspec.yml
          artifacts:
            files:
              - 'appspec.yml'
              - 'taskdef.json'
  ###################################
  # EventBridge rule to trigger pipeline on ECR image push
  ###################################
  EventBridgeToPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokePipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

  EcrImagePushRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger CodePipeline when ECR image push succeeds
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          result:
            - SUCCESS
          repository-name:
            - !Ref EcrRepoName
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          Id: CodePipelineTarget
          RoleArn: !GetAtt EventBridgeToPipelineRole.Arn

# ------------------------------- OUTPUTS -----------------------------------
Outputs:
  AlbDNS:
    Description: ALB DNS
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  EcrRepositoryUri:
    Description: ECR repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepoName}

  ClusterName:
    Description: ECS Cluster name
    Value: !Ref EcsCluster

  ServiceName:
    Description: ECS Service name
    Value: !Ref EcsService

  PipelineName:
    Description: CodePipeline name
    Value: !Ref Pipeline

  ArtifactBucketName:
    Description: S3 artifact bucket
    Value: !Ref ArtifactBucket